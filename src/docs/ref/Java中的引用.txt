1. Java中有四种引用类型，分别是：
    1.1 强引用（StrongReference）
    1.2 软引用（SoftReference）
    1.3 弱引用（WeakReference）
    1.4 虚引用（PhantomReference）

    这四个类都继承 Reference，在 Reference 类中有两个成员变量：Referent、ReferenceQueue
    Referent：被引用对象
    ReferenceQueue：当引用的 Referent 被回收后该引用会被 enqueue 到这个 ReferenceQueue 中。

2. 如果 Reference 在构造方法的时候加入 ReferenceQueue 参数，Reference 在它的 Referent 被 GC 时，会将这个 Reference 加入到 ReferenceQueue 中

    举个例子：WeakHashMap，看下它的静态内部类 Entry，定义如下：
    private static class Entry<K,V> extends WeakReference<Object> implements Map.Entry<K,V>
    可以看到这个 Entry 继承 WeakReference，再看它的构造函数：
    Entry(Object key, V value,
          ReferenceQueue<Object> queue,
          int hash, Entry<K,V> next) {
        super(key, queue);
        this.value = value;
        this.hash  = hash;
        this.next  = next;
    }
    可以看出，在构造 Entry 实例的时候，会调用 super(key, queue)，来调用 WeakReference 的构造函数，因此在构造 Entry 时，传入的 Key 参数，当该
    Key 不存在强引用的时候，一旦发生 GC，就会把该 Key 回收，并且将该 Key 加入到 ReferenceQueue 中，我们可以看一下 WeakHashMap 中的 getTable()
    方法，该方法会遍历WeakHashMap的成员变量：queue，该变量的类型是 ReferenceQueue<Object>，通过遍历该 queue，然后把已经被 GC 掉的 key 对应的
    value 置 null，帮助 GC。 具体校验弱引用是否被GC，已经清除 WeakHashMap 中的键值对的方法是：expungeStaleEntries（expunge 抹去 stale 陈旧）

