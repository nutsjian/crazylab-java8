原理：
    1. 底层使用的是 HashMap，但是对比 HashMap 它的迭代是有序的，而 HashMap 的迭代是无序的。
    2. 所以它具备 HashMap 的高效查询，同时牺牲一定的空间来保证迭代的有序


应用：
    1. 既要查询的高效，又需要遍历的有序

应用场景：
    1. 比如加载一些配置文件（键值对），但在加载过程中可能会出现一些键是重复的，我们希望保留最后一个值，但是还希望是按原来
    的键顺序输出。

    2. 购物车，键为购买项目，值为购买数量，需要按用户添加的顺序保存

    3. 可以实现一个 LRU Cache，首先 LinkedHashMap 是一个 Key/Value 的存储结构。其次它是有序的，另外，我们通过设置 accessOrder
    后，可以让那些 get(e) 后的元素往后移动，这样就可以配合 removeEldestEntry() 来删除最近最少使用的元素了。
       具体可以参考 android 中的 LruCache